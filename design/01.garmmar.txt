// parser与lexer纯手工实现，以下表示仅供参考，而不用于任何语法分析器的生成器。

// -------------------------------
// parser
// -------------------------------
ChiFile : Import* (StructDeclare | ValueDeclare | LambdaDeclare | ActorDeclare | EnumDeclare)*
Import : IMPORT Path;
Path : ID ('/' ID)*

StructDeclare : NATIVE? STRUCT TypeName GenericsParams? '{' StructBody '}';
StructBody : (SValueDecl | SLambdaDecl | SActorDecl)* ;
SValueDecl : VAL ValName ((':' TypeName) | (('=' | DEFAULT) ValueExp));
SLambdaDecl : LAMBDA ID GenericsParams? ':' LambdaType (('=' | DEFAULT) Lambda)? ;
SActorDecl : ; (ACTOR | ACTORS) ID ':' LambdaType (('=' | DEFAULT) Lambda)? ;

GenericsParams : '[' ID (',' ID)* ']' ;

LambdaType : (LambdaTypeReturn | (LambdaTypeParams ('->' LambdaTypeReturn)?);
LambdaTypeParams : TypeName  | ('(' LambdaTypeParam (',' LambdaTypeParam)* ')');
LambdaTypeParam : TypeName | LambdaType ;
LambdaTypeReturn : TypeName | LambdaType ;
Lambd : Annotations? (LambdaParams '->')? LambdaBody;
LambdaParams : ID | ('(' ')');
LambdaBody : ValueExp | ('{' Statements'}');
Annotations : ('@' ID)+;

Statements : Statement+ ;
Statement : ;

ValueDeclare : VAL ValName '=' ValueExp;
LambdaDeclare : ;
ActorDeclare : ;
EnumDeclare : ;

TypeName : ID ;
ValName : ID ;
ValueExp : ;

// -------------------------------
// lexer
// -------------------------------
NATIVE : 'native' ;
STRUCT : 'struct' ;
VAL : 'val' ;
LAMBDA : 'lambda' ;
ACTOR : 'actor' ;
ACTORS : 'actors' ;
CASE : 'case' ;
WHEN : 'when' ;
SELF : 'self' ;
ENUM : 'enum' ;
IMPORT : 'import' ;
DEFAULT : 'default' ;
ARROW : '->' ;
BLANK : [\n\r\t ] ;
ASSIGNMENT : '=' ;
EQUALS : '==' ;
LBT : '(' ;
RBT : ')' ;
LSBT : '[' ;
RSBT : ']' ;
LBBT : '{' ;
RBBT : '}' ;
COLON : ':' ;
COMMA : ',' ;
DOT : '.' ;
SEMI : ';' ;
AT : '@' ;
ELLIPSIS : '...' ;
CHAR : '\'' 除单引号之外的任意单个字符或一个转义字符 '\''
STRING : '"' 除换行和双引号之外的所有字符或转义字符(可以有多个) '"' ;
ID : [^;'",.@=()\[\]{}\s]+ 并且不是上面的其它关键字 并且如果有冒号则只能在开头 ;
